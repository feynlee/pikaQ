# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_delayed.ipynb.

# %% auto 0
__all__ = ['DelayedFunc', 'DelayedTerm']

# %% ../nbs/02_delayed.ipynb 2
import inspect

from functools import partial
from fastcore.basics import *
from fastcore.meta import *
from typing import Union
from .utils import *

try: from types import UnionType
except ImportError: UnionType = None

# %% ../nbs/02_delayed.ipynb 5
class DelayedFunc:
    """Delay the execution of stored function until exec is run."""
    def __init__(self, func, args, kwargs, order=None) -> None: 
        store_attr()

    def exec(self, func=None, **kwargs):
        """keyword arguments can be overwritten with any provided new kwargs."""
        self.kwargs.update(kwargs)
        # recursively resolve all delayed functions
        args = (exec(arg, func, **self.kwargs) for arg in self.args) 
        return self.func(*args, **self.kwargs)


class DelayedTerm(DelayedFunc):
    """Delay the generation of sql terms until get_sql is run."""
    def __init__(self, func, args, kwargs, order=None) -> None:
        super().__init__(func, args, kwargs, order)

    def get_sql(self, **kwargs):
        return self.exec(func=str, **kwargs)
