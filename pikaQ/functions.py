# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/03_functions.ipynb.

# %% auto 0
__all__ = ['Max', 'Min', 'Sum', 'Avg', 'Count', 'Abs', 'Round', 'First', 'Last', 'CustomFunction', 'Cast', 'Coalesce', 'Concat',
           'convert_format', 'Date', 'AddMonths']

# %% ../nbs/03_functions.ipynb 2
from .utils import execute
from .terms import FieldBase, Field, custom_func

# %% ../nbs/03_functions.ipynb 4
class CustomFunction(FieldBase):
    def __init__(self, func_name: str, arg_names: list) -> None:
        super().__init__()
        self.func_name = func_name
        self.arg_names = arg_names
        self.get_sql = self.execute
    
    def __call__(self, *args):
        if len(args) != len(self.arg_names):
            raise ValueError(f"The number of args provided {len(args)} is not the same as the number of args expected by this function ({len(self.arg_names)})!")
        def func(*args):
            return f"{self.func_name}({', '.join(args)})"

        self.func = func
        self.args = args
        return self

    def execute(self, **kwargs):
        args = [execute(arg, **kwargs) for arg in self.args]
        return self.func(*args)

# %% ../nbs/03_functions.ipynb 9
Max = CustomFunction('MAX', ['field'])
Min = CustomFunction('MIN', ['field'])
Sum = CustomFunction('SUM', ['field'])
Avg = CustomFunction('AVG', ['field'])
Count = CustomFunction('COUNT', ['field'])
Abs = CustomFunction('ABS', ['field'])
Round = CustomFunction('ROUND', ['field', 'decimals'])
First = CustomFunction('FIRST', ['field'])
Last = CustomFunction('LAST', ['field'])

@custom_func
def Cast(field, type):
    return f"CAST({field} AS {type})"

@custom_func
def Coalesce(*args):
    return f"COALESCE({', '.join(args)})"

@custom_func
def Concat(*args):
    return f"CONCAT({', '.join(args)})"

def convert_format(format, dialect='sql'):
    if dialect == 'spark':
        return (format.replace('YYYY', 'yyyy')
                .replace('YY', 'yy')
                .replace('DD', 'dd')
                )
    elif dialect == 'snowflake':
        return (format.replace('HH', 'HH24')
                .replace('mm', 'MI')
        )
    else:
        return format

@custom_func
def Date(expression, format=None, dialect='sql'):
    if format:
        format = convert_format(format, dialect)
        return f"DATE('{expression}', '{format}')"
    else:
        return f"DATE('{expression}')"

@custom_func
def AddMonths(date, months, dialect='sql'):
    if dialect in ['snowflake', 'spark']:
        return f"ADD_MONTHS({date}, {months})"
    elif dialect == 'athena':
        return f"date_add('month', {months}, {date})"
    else:
        return f"DATE_ADD({date}, INTERVAL {months} MONTH)"

